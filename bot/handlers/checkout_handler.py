import psycopg2
from telegram import Update, Bot
from telegram.ext import CallbackContext
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from states.base_state import CalculatorState, StatusForm


dp = Dispatcher()
# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞

@dp.callback_query_handler(lambda query: query.data == 'calculator')
async def handle_calculator(query: types.CallbackQuery):
    await query.message.reply("–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")

    # –í–≤–æ–¥ —Ü–µ–Ω
    await CalculatorState.price.set()

@dp.message_handler(state=CalculatorState.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É.")
        return

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –≤–∞–ª—é—Ç—ã –∏ –∫—É—Ä—Å–∞
    exchange_rate = 11.5  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    commission = 8  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    total_cost = price * exchange_rate + commission

    await message.reply(f"–¶–µ–Ω–∞: {price}\n–ö—É—Ä—Å —é–∞–Ω—è: {exchange_rate}\n–ö–æ–º–º–∏—Å—Å–∏—è: {commission}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±–ª–µ–π \n")

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await state.finish()

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query_handler(lambda query: query.data == 'contact')
async def handle_contact_manager(query: types.CallbackQuery):
    message_text = "–°–≤—è–∑—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
    message_text += "–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, –Ω–µ –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª. \n"
    message_text += " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n"
    message_text += "–ú–µ–Ω–µ–¥–∂–µ—Ä—É —Å—Ç–æ–∏—Ç –ø–∏—Å–∞—Ç—å –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. \n\n"
    message_text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram.\n"
    message_text += "–ê–∫–∫–∞—É–Ω—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ : @admin021\n\n"

    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("Open Telegram", url="https://t.me/chyngyz0411")
    keyboard.add(button)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, reply_markup=keyboard)
# –ö–æ–Ω—Ç–∞–∫—Ç—ã



# –¥–æ—Å—Ç–∞–≤–∫–∞
@dp.callback_query_handler(lambda query: query.data == 'delivery')
async def handle_delivery(query: types.CallbackQuery):
    delivery_info = [
        "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–∞–∫—Ç—É –≤ –ú–æ—Å–∫–≤–µ, –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –Ω–∞–º, –º—ã –≤–∑–≤–µ—à–∏–≤–∞–µ–º –µ–≥–æ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        " üöó –ê–≤—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ 890 —Ä—É–±–ª–µ–π –∑–∞ –∫–≥ (15-25 –¥–Ω—è)",
        "‚úàÔ∏è –ê–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ 1190 —Ä—É–±–ª–µ–π –∑–∞ –∫–≥ (12-15 –¥–Ω–µ–π)",
        "(–°—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–º –∑–∞–∫–∞–∑ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)",
        "–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤–µ—Å–∞.–ï—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3–∫–≥ –∑–Ω–∞—á–∏—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*1.3   "
    ]

    message_text = "\n".join(delivery_info)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, parse_mode='HTML', reply_markup=keyboard)

# –¥–æ—Å—Ç–∞–≤–∫–∞





# –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞



@dp.callback_query_handler(lambda query: query.data == 'status', state=None)
async def ask_for_product_id(query: types.CallbackQuery):
    await StatusForm.ID_PRODUCT.set()
    await query.message.reply("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=StatusForm.ID_PRODUCT)
async def process_product_id(message: types.Message, state: FSMContext):
    product_id = message.text

    cursor = conn.cursor()
    conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='telebot',
            user='telebot',
            password='xsyusp'
        )
    try:
        cursor.execute("SELECT * FROM telegram_wholesaleordertelegtam WHERE unique_id = %s", (product_id,))
        wholesale_order = cursor.fetchone()

        if wholesale_order:
            expected_status = wholesale_order[5]
            status_mapping = {
                1: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
                2: '–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ',

            }
            expected_status_text = status_mapping.get(expected_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

            message_text = f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ ID: {product_id}\n–û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {expected_status_text}"
        else:
            message_text = f"–ó–∞–∫–∞–∑ —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        message_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    cursor.close()

    await message.reply(message_text)



# –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞



# –ö—É—Ä—Å –≤–∞–ª—é—Ç
@dp.callback_query_handler(lambda query: query.data == 'course')
async def handle_course(query: types.CallbackQuery):
    exchange_rate = 11.5  # –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–±–º–µ–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º

    message_text += f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å 12.4\n"

    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='answers'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, reply_markup=keyboard)

# –ö—É—Ä—Å –≤–∞–ª—é—Ç




# –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

@dp.callback_query_handler(lambda query: query.data == 'answers')
async def handle_answers(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    

    message_text = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º FAQ\n\n"
    message_text += "üìö –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ –Ω–∞—à–µ–º —Ä–∞–∑–¥–µ–ª–µ —Å–ø—Ä–∞–≤–∫–∏.\n\n"
    message_text += "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"


    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("Open Telegram", url="https://telegra.ph/FAQ-06-16-9#%D0%9A%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D1%8F%D1%82%D1%8C-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7 "),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await query.message.reply(message_text, parse_mode='HTML', reply_markup=keyboard)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

    # ...
