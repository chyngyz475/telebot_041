import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import requests
from django.utils import timezone 
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from keyboards.menu import get_menu_keyboard
from keyboards.menu import menu_buttons
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from openpyxl import Workbook
import psycopg2
import uuid
from django.db import transaction 
from states import CheckoutRetailState, CheckoutWholesaleState


def generate_item_id():
    # Generate a unique item ID using UUID (Universally Unique Identifier)
    item_id = str(uuid.uuid4())
    return item_id

workbook = Workbook()
sheet = workbook.active


conn = psycopg2.connect(
    host='coolbrs.com',
    port='5432',
    database='chyngyz',
    user='admin',
    password='C00lBRS123'
)
  



API_TOKEN = '5876031471:AAG15OS46lkP9X08u6OJWvMkFB3KJvxLKkg' 

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –†–∞–¥—ã, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —á–∞—Ç-–±–æ—Ç–æ–º –≥—Ä—É–ø–ø—ã "–•–æ—Ä–æ—à–∏–π –ë–∏–∑–Ω–µ—Å". –ü—Ä–∏—è—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ü§ù', reply_markup=get_menu_keyboard())


@dp.callback_query_handler(lambda query: query.data == 'back', state='*')
async def process_back_callback(query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await query.message.edit_text('Me–Ω—é', reply_markup=get_menu_keyboard())
    await state.finish()  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query_handler(lambda query: query.data == 'checkout')
async def handle_checkout(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
@dp.message_handler(commands=['cancel'], state='*')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.info('Cancelling state %r', current_state)
        await state.finish()
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
# –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑


# –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
@dp.callback_query_handler(lambda query: query.data == 'checkout_retail')
async def handle_checkout_retail(query: types.CallbackQuery):
    await bot.send_message(query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é.")
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")
    await CheckoutRetailState.name.set()

@dp.callback_query_handler(lambda query: query.data == 'checkout_retail')
async def order_handler(message: types.Message):
    await CheckoutRetailState.first()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")

@dp.message_handler(state=CheckoutRetailState.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name.startswith('@'):
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    await state.update_data({'name': name})
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª C POIZON:")

@dp.message_handler(state=CheckoutRetailState.sku)
async def process_sku(message: types.Message, state: FSMContext):
    sku = message.text.strip()
    await state.update_data({'sku': sku})
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=CheckoutRetailState.color)
async def process_color(message: types.Message, state: FSMContext):
    color = message.text.strip()
    await state.update_data({'color': color})
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:")

@dp.message_handler(state=CheckoutRetailState.size)
async def process_size(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data({'size': size})
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@dp.message_handler(state=CheckoutRetailState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    amount_in_yuan = message.text.strip()

    exchange_rate = 9.6  
    amount_in_rubles = float(amount_in_yuan) * exchange_rate

    await state.update_data({'amount': amount_in_yuan})
    await CheckoutRetailState.next()

    data = await state.get_data()
    name = data['name']
    sku = data['sku']
    color = data['color']
    size = data['size']
    amount_in_yuan = data['amount']
    amount_in_rubles = amount_in_rubles 
    item_id = generate_item_id()            

    message_text = "üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
    message_text += f"üë§ Full Name: {name}\n"
    message_text += f"üÜî Product ID: {item_id}\n"
    message_text += f"üè∑Ô∏è Product SKU: {sku}\n"
    message_text += f"üé® Color: {color}\n"
    message_text += f"üìè Size: {size}\n"
    message_text += f"üí∞ Amount in Yuan: {amount_in_yuan} CNY\n"
    message_text += f"üíµ Amount in Rubles: {amount_in_rubles:.2f} RUB\n\n"
    message_text += "üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É.\n\n"
    message_text += "‚úÖ –†–∞–±–æ—á–∏–µ –∫–∞—Ä—Ç–∞ ‚úÖ\n"
    message_text += "üè¶ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ü–æ–ª—É—á–∞—Ç–µ–ª—å\n"
    message_text += "2211220088889991\n"
    message_text += "üë§ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
    message_text += "üì∑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á–µ–∫/—Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
    message_text += "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n"

    await message.reply(message_text)

    await CheckoutRetailState.photo.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=CheckoutRetailState.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id

    data = await state.get_data()
    name = data['name']
    sku = data['sku']
    color = data['color']
    size = data['size']
    amount = data['amount']

    order_data = {
        'name': name,
        'sku': sku,
        'color': color,
        'size': size,
        'amount': amount,
        'photo': f"/media/photos/{photo_id}",
        'id_wh': generate_item_id(),
    }
    cur = conn.cursor()


    insert_query = """
    INSERT INTO telegram_retailorder (name, sku, color, size, amount, photo, id_wh)
    VALUES (%(name)s, %(sku)s, %(color)s, %(size)s, %(amount)s, %(photo)s, %(id_wh)s);
    """

    cur.execute(insert_query, order_data)


    conn.commit()
    cur.close()
    conn.close()


    
    await message.reply("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. –°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!", reply_markup=types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add(
    types.KeyboardButton("–ú–µ–Ω—é")
))


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.info(f"Cancelling state {current_state}")
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
@dp.callback_query_handler(lambda query: query.data == 'checkout_wholesale')
async def handle_checkout_wholesale(query: types.CallbackQuery):
    await CheckoutWholesaleState.first()
    await query.message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")

@dp.message_handler(state=CheckoutWholesaleState.username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()

    await state.update_data(username=username)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ:")

@dp.message_handler(state=CheckoutWholesaleState.quantitywh)
async def process_quantity(message: types.Message, state: FSMContext):
    quantitywh = message.text.strip()

    await state.update_data(quantitywh=quantitywh)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª  —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "DD1903-100 –°–∏–Ω—è—è \n"
                        "CW2288-111 –ß–µ—Ä–Ω–∞—è")

@dp.message_handler(state=CheckoutWholesaleState.item_details)
async def process_item_details(message: types.Message, state: FSMContext):
   # –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ
    items = message.text.strip().split('\n')

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è items_data –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()
    items_data = data.get('items_data', [])

# –ü–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏ —Ü–≤–µ—Ç
    for item in items:
        item_details = item.split()
        if len(item_details) >= 2:
            skuwh = item_details[0]
            colorwh = ' '.join(item_details[1:])
            items_data.append((skuwh, colorwh))

   # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ items_data –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(items_data=items_data)

async def process_size(message: types.Message, state: FSMContext):
    sizewh = message.text.strip()

    await state.update_data(sizewh=sizewh)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö:")

@dp.message_handler(state=CheckoutWholesaleState.amountwh)
async def process_amount(message: types.Message, state: FSMContext):
    amountwh = message.text.strip()

    await state.update_data(amountwh=amountwh)
    await CheckoutWholesaleState.next()

    # Retrieve the data from the state
    data = await state.get_data()
    username = data['username']
    quantitywh = data['quantitywh']
    items_data = data['items_data']
    amountwh = data['amountwh']

    # Prepare the message text
    message_text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
    message_text += f"üõçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü –∏–π: {quantitywh}\n"
    message_text += "üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"

    # Loop through items_data and add details for each item
    for i, (sku, color) in enumerate(items_data, start=1):
        message_text += f"–¢–æ–≤–∞—Ä {i}:\n"
        message_text += f"  üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª C POIZON: {sku}\n"
        message_text += f"  üé® –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏: {color}\n"

    message_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {amountwh} —é–∞–Ω–∏\n"
    message_text += "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–û–ø–ª–∞—Ç–∏—Ç—å](https://example.com)\n"
    message_text += "üì∑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á–µ–∫/—Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
    message_text += "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n"

    # Send the message to the user
    await message.reply(message_text, parse_mode="Markdown")

    # Move to the next state to handle photo confirmation
    await CheckoutWholesaleState.photowh.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=CheckoutWholesaleState.photowh)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id

    data = await state.get_data()
    username = data['username']
    quantity = data['quantitywh']
    items_data = data['items_data']
    amountwh = data['amountwh']

    try:
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='telebot',
            user='telebot',
            password='xsyusp'
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
        cursor = conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        insert_query = "INSERT INTO telegram_wholesaleordertelegtam (username, quantity, items_data, amountwh, photowh) VALUES (%s, %s, %s, %s, %s, %s)"
        cursor.execute(insert_query, (username, quantity, items_data,  amountwh, photo_id))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.commit()
        cursor.close()
        conn.close()

        await message.reply("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. –°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")







if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
