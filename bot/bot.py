import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import requests
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from keyboards.menu import get_menu_keyboard
from keyboards.menu import menu_buttons
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from openpyxl import Workbook
import psycopg2
import uuid




menu_buttons = {
    'checkout': 'üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    'calculator': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
    'answers': '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
    'contact': 'üìû –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
    'status': 'üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
    'course': 'üéì –ö—É—Ä—Å',
    'delivery': 'üöö –î–æ—Å—Ç–∞–≤–∫–∞',
    'order_history': 'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'
}

class CalculatorState(StatesGroup):
    price = State()

    price = State()

class CheckoutRetailState(StatesGroup):
    name = State()    
    sku = State()    
    color = State()   
    size = State()    
    amount = State()  
    photo = State()   

class CheckoutWholesaleState(StatesGroup):
    username = State()
    quantitywh = State()
    item_details = State()
    sizewh = State()
    amountwh = State()
    photowh = State() 
  


def generate_item_id():
    # Generate a unique item ID using UUID (Universally Unique Identifier)
    item_id = str(uuid.uuid4())
    return item_id

workbook = Workbook()
sheet = workbook.active


conn = psycopg2.connect(
    host='localhost',
    port='5432',
    database='telebot',
    user='telebot',
    password='xsyusp'
)
  

class StatusForm(StatesGroup):
    ID_PRODUCT = State()


API_TOKEN = '5952272138:AAH6RdyapDFqaM-TsaCNjw6AeFy29mUV4iA' 

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –†–∞–¥—ã, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —á–∞—Ç-–±–æ—Ç–æ–º –≥—Ä—É–ø–ø—ã "–•–æ—Ä–æ—à–∏–π –ë–∏–∑–Ω–µ—Å". –ü—Ä–∏—è—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ü§ù', reply_markup=get_menu_keyboard())



@dp.callback_query_handler(lambda query: query.data == 'back', state='*')
async def process_back_callback(query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await query.message.edit_text('Me–Ω—é', reply_markup=get_menu_keyboard())
    await state.finish()  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query_handler(lambda query: query.data == 'checkout')
async def handle_checkout(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
@dp.message_handler(commands=['cancel'], state='*')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.info('Cancelling state %r', current_state)
        await state.finish()
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
# –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑


# –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
@dp.callback_query_handler(lambda query: query.data == 'checkout_retail')
async def handle_checkout_retail(query: types.CallbackQuery):
    await bot.send_message(query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é.")
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")
    await CheckoutRetailState.name.set()

@dp.callback_query_handler(lambda query: query.data == 'checkout_retail')
async def order_handler(message: types.Message):
    await CheckoutRetailState.first()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")

@dp.message_handler(state=CheckoutRetailState.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name.startswith('@'):
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    await state.update_data(name=name)
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª C POIZON:")

@dp.message_handler(state=CheckoutRetailState.sku)
async def process_sku(message: types.Message, state: FSMContext):
    sku = message.text.strip()
    await state.update_data(sku=sku)
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=CheckoutRetailState.color)
async def process_color(message: types.Message, state: FSMContext):
    color = message.text.strip()
    await state.update_data(color=color)
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:")

@dp.message_handler(state=CheckoutRetailState.size)
async def process_size(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data(size=size)
    await CheckoutRetailState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=CheckoutRetailState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    amount_in_yuan = message.text.strip()

    exchange_rate = 9.6  
    amount_in_rubles = float(amount_in_yuan) * exchange_rate

    await state.update_data(amount=amount_in_yuan)
    await CheckoutRetailState.next()
# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    name = data['name']
    sku = data['sku']
    color = data['color']
    size = data['size']
    amount_in_yuan = data['amount']
    amount_in_rubles = amount_in_rubles
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    item_id = generate_item_id()            

    message_text = "üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
    message_text += f"üë§ Full Name: {name}\n"
    message_text += f"üÜî Product ID: {item_id}\n"
    message_text += f"üè∑Ô∏è Product SKU: {sku}\n"
    message_text += f"üé® Color: {color}\n"
    message_text += f"üìè Size: {size}\n"
    message_text += f"üí∞ Amount in Yuan: {amount_in_yuan} CNY\n"
    message_text += f"üíµ Amount in Rubles: {amount_in_rubles:.2f} RUB\n\n"
    message_text += "üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É.\n\n"
    message_text += "‚úÖ –†–∞–±–æ—á–∏–µ –∫–∞—Ä—Ç–∞ ‚úÖ\n"
    message_text += "üè¶ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ü–æ–ª—É—á–∞—Ç–µ–ª—å\n"
    message_text += "2211220088889991\n"
    message_text += "üë§ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
    message_text += "üì∑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á–µ–∫/—Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
    message_text += "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n"

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(message_text)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await CheckoutRetailState.photo.set()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=CheckoutRetailState.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id

    data = await state.get_data()
    name = data['name']
    sku = data['sku']
    color = data['color']
    size = data['size']
    amount = data['amount']
    status_id = data['status']

    status_id = generate_status_id()
    await state.update_data(status=status_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_data = {  
        'name': name,
        'sku': sku,
        'color': color,
        'size': size,
        'amount': amount,
        'photo': f"/media/photos/{photo_id}",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
        'status': status_id,
    }

    cur = conn.cursor()

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    insert_query = """
    INSERT INTO telegram_retailorder (name, sku, color, size, amount, photo, status)
    VALUES (%(name)s, %(sku)s, %(color)s, %(size)s, %(amount)s, %(photo)s, %(status)s);
    """

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
    cur.execute(insert_query, order_data)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.commit()
    cur.close()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. –°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")

#–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ 

# order_history = []  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤

# @dp.callback_query_handler(lambda query: query.data == 'order_history')
# async def handle_order_history(query: types.CallbackQuery):
#     # –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
#     order_history = handle_order_history()

#     if order_history:
#         message_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
#         for order in order_history:
#             message_text += f"üì¶ –ó–∞–∫–∞–∑ ID: {order['item_id']}\n"
#             message_text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order['creation_date']}\n"
#             message_text += f"üë§ Full Name: {order['name']}\n"
#             message_text += f"üè∑Ô∏è Product SKU: {order['sku']}\n"
#             message_text += f"üé® Color: {order['color']}\n"
#             message_text += f"üìè Size: {order['size']}\n"
#             message_text += f"üí∞ Amount in Yuan: {order['amount_in_yuan']} CNY\n"
#             message_text += f"üíµ Amount in Rubles: {order['amount_in_rubles']:.2f} RUB\n\n"
#             message_text += "==============================\n\n"

#         await query.message.reply(message_text)
#     else:
#         await query.message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.info(f"Cancelling state {current_state}")
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
@dp.callback_query_handler(lambda query: query.data == 'checkout_wholesale')
async def handle_checkout_wholesale(query: types.CallbackQuery):
    await CheckoutWholesaleState.first()
    await query.message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:")

@dp.message_handler(state=CheckoutWholesaleState.username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()

    await state.update_data(username=username)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ:")

@dp.message_handler(state=CheckoutWholesaleState.quantitywh)
async def process_quantity(message: types.Message, state: FSMContext):
    quantitywh = message.text.strip()

    await state.update_data(quantitywh=quantitywh)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª  —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "DD1903-100 –°–∏–Ω—è—è \n"
                        "CW2288-111 –ß–µ—Ä–Ω–∞—è")

@dp.message_handler(state=CheckoutWholesaleState.item_details)
async def process_item_details(message: types.Message, state: FSMContext):
   # –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ
    items = message.text.strip().split('\n')

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è items_data –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()
    items_data = data.get('items_data', [])

# –ü–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏ —Ü–≤–µ—Ç
    for item in items:
        item_details = item.split()
        if len(item_details) >= 2:
            skuwh = item_details[0]
            colorwh = ' '.join(item_details[1:])
            items_data.append((skuwh, colorwh))

   # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ items_data –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(items_data=items_data)

    # –°–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "M\n"
                        "L")

@dp.message_handler(state=CheckoutWholesaleState.sizewh)
async def process_size(message: types.Message, state: FSMContext):
    sizewh = message.text.strip()

    await state.update_data(sizewh=sizewh)
    await CheckoutWholesaleState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö:")

@dp.message_handler(state=CheckoutWholesaleState.amountwh)
async def process_amount(message: types.Message, state: FSMContext):
    amountwh = message.text.strip()

    await state.update_data(amountwh=amountwh)
    await CheckoutWholesaleState.next()

    # Retrieve the data from the state
    data = await state.get_data()
    username = data['username']
    quantitywh = data['quantitywh']
    items_data = data['items_data']
    sizewh = data['sizewh']
    amountwh = data['amountwh']

    # Prepare the message text
    message_text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
    message_text += f"üõçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {quantitywh}\n"
    message_text += "üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"

    # Loop through items_data and add details for each item
    for i, (sku, color) in enumerate(items_data, start=1):
        message_text += f"–¢–æ–≤–∞—Ä {i}:\n"
        message_text += f"  üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª C POIZON: {sku}\n"
        message_text += f"  üé® –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏: {color}\n"
        message_text += f"  üìè –†–∞–∑–º–µ—Ä: {sizewh}\n\n"

    message_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {amountwh} —é–∞–Ω–∏\n"
    message_text += "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–û–ø–ª–∞—Ç–∏—Ç—å](https://example.com)\n"
    message_text += "üì∑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á–µ–∫/—Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
    message_text += "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n"

    # Send the message to the user
    await message.reply(message_text, parse_mode="Markdown")

    # Move to the next state to handle photo confirmation
    await CheckoutWholesaleState.photowh.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=CheckoutWholesaleState.photowh)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id

    data = await state.get_data()
    username = data['username']
    quantity = data['quantitywh']
    items_data = data['items_data']
    sizewh = data['sizewh']
    amountwh = data['amountwh']
    photo_id = data['photowh']

    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = psycopg2.connect(
        host='localhost',
        port='5432',
        database='telebot',
        user='telebot',
        password='xsyusp'
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cursor = conn.cursor()

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    insert_query = "INSERT INTO telegram_wholesaleordertelegtam (username, quantity, items_data, sizewh, amountwh, photowh) VALUES (%s, %s, %s, %s, %s, %s)"
    cursor.execute(insert_query, (username, quantity, items_data, sizewh, amountwh, photo_id))

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.commit()
    cursor.close()
    conn.close()

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. –°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")




# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞

@dp.callback_query_handler(lambda query: query.data == 'calculator')
async def handle_calculator(query: types.CallbackQuery):
    await query.message.reply("–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")

    # –í–≤–æ–¥ —Ü–µ–Ω
    await CalculatorState.price.set()

@dp.message_handler(state=CalculatorState.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É.")
        return

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –≤–∞–ª—é—Ç—ã –∏ –∫—É—Ä—Å–∞
    exchange_rate = 11.5  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    commission = 8  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    total_cost = price * exchange_rate + commission

    await message.reply(f"–¶–µ–Ω–∞: {price}\n–ö—É—Ä—Å —é–∞–Ω—è: {exchange_rate}\n–ö–æ–º–º–∏—Å—Å–∏—è: {commission}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±–ª–µ–π \n")

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await state.finish()

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query_handler(lambda query: query.data == 'contact')
async def handle_contact_manager(query: types.CallbackQuery):
    message_text = "–°–≤—è–∑—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
    message_text += "–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, –Ω–µ –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª. \n"
    message_text += " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n"
    message_text += "–ú–µ–Ω–µ–¥–∂–µ—Ä—É —Å—Ç–æ–∏—Ç –ø–∏—Å–∞—Ç—å –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. \n\n"
    message_text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram.\n"
    message_text += "–ê–∫–∫–∞—É–Ω—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ : @admin021\n\n"

    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("Open Telegram", url="https://t.me/chyngyz0411")
    keyboard.add(button)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, reply_markup=keyboard)
# –ö–æ–Ω—Ç–∞–∫—Ç—ã



# –¥–æ—Å—Ç–∞–≤–∫–∞
@dp.callback_query_handler(lambda query: query.data == 'delivery')
async def handle_delivery(query: types.CallbackQuery):
    delivery_info = [
        "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–∞–∫—Ç—É –≤ –ú–æ—Å–∫–≤–µ, –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –Ω–∞–º, –º—ã –≤–∑–≤–µ—à–∏–≤–∞–µ–º –µ–≥–æ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        " üöó –ê–≤—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ 890 —Ä—É–±–ª–µ–π –∑–∞ –∫–≥ (15-25 –¥–Ω—è)",
        "‚úàÔ∏è –ê–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ 1190 —Ä—É–±–ª–µ–π –∑–∞ –∫–≥ (12-15 –¥–Ω–µ–π)",
        "(–°—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–º –∑–∞–∫–∞–∑ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)",
        "–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤–µ—Å–∞.–ï—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3–∫–≥ –∑–Ω–∞—á–∏—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*1.3   "
    ]

    message_text = "\n".join(delivery_info)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, parse_mode='HTML', reply_markup=keyboard)

# –¥–æ—Å—Ç–∞–≤–∫–∞





# –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=StatusForm.ID_PRODUCT)
async def process_product_id(message: types.Message, state: FSMContext):
    product_id = message.text

    try:
        # Assuming you have different models for Wholesale and Retail orders
        wholesale_order = WholesaleOrderTelegtam.objects.get(unique_id=product_id)
        expected_status = wholesale_order.status
        # You can define your status mapping here
        status_mapping = {
            1: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            2: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            3: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            4: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        }
        expected_status_text = status_mapping.get(expected_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

        message_text = f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ ID: {product_id}\n–û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {expected_status_text}"
    except WholesaleOrderTelegtam.DoesNotExist:
        message_text = f"–ó–∞–∫–∞–∑ —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

    await message.reply(message_text)

# –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞



# –ö—É—Ä—Å –≤–∞–ª—é—Ç
@dp.callback_query_handler(lambda query: query.data == 'course')
async def handle_course(query: types.CallbackQuery):
    exchange_rate = 11.5  # –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–±–º–µ–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º

    message_text += f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å 12.4\n"

    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_retail'),
        types.InlineKeyboardButton("üì¶ –û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data='checkout_wholesale'),
        types.InlineKeyboardButton("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='answers'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)

    await query.message.reply(message_text, reply_markup=keyboard)

# –ö—É—Ä—Å –≤–∞–ª—é—Ç




# –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

@dp.callback_query_handler(lambda query: query.data == 'answers')
async def handle_answers(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    

    message_text = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º FAQ\n\n"
    message_text += "üìö –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ –Ω–∞—à–µ–º —Ä–∞–∑–¥–µ–ª–µ —Å–ø—Ä–∞–≤–∫–∏.\n\n"
    message_text += "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"


    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("Open Telegram", url="https://telegra.ph/FAQ-06-16-9#%D0%9A%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D1%8F%D1%82%D1%8C-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7 "),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'),
    ]
    keyboard.add(*buttons)
    await query.message.reply(message_text, parse_mode='HTML', reply_markup=keyboard)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã




if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
